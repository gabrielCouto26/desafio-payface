org: gabrielcouto26
app: desafio-payface
service: desafio-payface

plugins:
  - serverless-plugin-typescript
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    SQS_QUEUE_URL:
      Fn::GetAtt: [TransactionQueue, QueueUrl]
    SNS_TOPIC_ARN:
      Ref: SuccessNotificationTopic
    DB_HOST:
      Fn::GetAtt: [PostgresDB, Endpoint.Address]
    DB_PORT: 5432
    DB_NAME: payface
    DB_USER: ${self:custom.dbUser}
    DB_PASSWORD: ${self:custom.dbPassword}
    REDIS_HOST:
      Fn::GetAtt: [RedisCache, RedisEndpoint.Address]
    REDIS_PORT:
      Fn::GetAtt: [RedisCache, RedisEndpoint.Port]
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - Fn::GetAtt: [TransactionQueue, Arn]
            - Fn::GetAtt: [TransactionDLQ, Arn]
        - Effect: Allow
          Action:
            - sns:Publish
            - sns:Subscribe
            - sns:Receive
          Resource:
            - Ref: SuccessNotificationTopic
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - Fn::GetAtt: [NotificationDLQ, Arn]
        - Effect: Allow
          Action:
            - rds-db:connect
          Resource:
            - Fn::GetAtt: [PostgresDB, DBInstanceArn]
        - Effect: Allow
          Action:
            - elasticache:DescribeReplicationGroups
            - elasticache:DescribeCacheClusters
          Resource: "*"

package:
  individually: true

build:
  esbuild: false

functions:
  sendMoney:
    handler: src/lambda/http.handler
    events:
      - http:
          path: /wallet/send
          method: post

  processTransaction:
    handler: src/lambda/sqs.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [TransactionQueue, Arn]

  notification:
    handler: src/lambda/sns.handler
    events:
      - sns:
          arn:
            Ref: SuccessNotificationTopic
          topicName: success-notification-topic
    onError: arn:aws:sqs:${self:provider.region}:${aws:accountId}:notification-dlq

resources:
  Resources:
    TransactionDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: transaction-dlq

    TransactionQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: transaction-queue
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [TransactionDLQ, Arn]
          maxReceiveCount: 2

    NotificationDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: notification-dlq

    SuccessNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: success-notification-topic
        DisplayName: Success Notification Topic

    PostgresDB:
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: postgres
        DBInstanceClass: db.t3.micro
        AllocatedStorage: 20
        MasterUsername: ${self:custom.dbUser}
        MasterUserPassword: ${self:custom.dbPassword}
        DBName: payface
        PubliclyAccessible: true
        VPCSecurityGroups:
          - Fn::GetAtt: [PostgresSecurityGroup, GroupId]

    PostgresSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for RDS PostgreSQL
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            CidrIp: 0.0.0.0/0

    RedisCache:
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        Engine: redis
        CacheNodeType: cache.t3.micro
        NumCacheNodes: 1
        Port: 6379
        VpcSecurityGroupIds:
          - Fn::GetAtt: [RedisSecurityGroup, GroupId]

    RedisSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Redis
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 6379
            ToPort: 6379
            CidrIp: 0.0.0.0/0

custom:
  dbUser: payface_admin
  dbPassword: ${ssm:/payface/db/password}
